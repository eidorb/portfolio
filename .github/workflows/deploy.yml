name: deploy
on:
  push:
    branches:
      - master
  # Allow workflow to be triggered from portfolio-ledger workflow.
  workflow_dispatch:
concurrency:
  group: ${{ github.workflow }}
jobs:
  deploy-portfolio:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      # Allows JWT to be requested from GitHub's OIDC provider.
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/checkout@v4
        with:
          repository: eidorb/portfolio-ledger
          token: ${{ secrets.TOKEN }}
          path: portfolio-ledger
      - id: cache
        uses: actions/cache@v4
        with:
          # Use contents of Mamba environment file, NPM lock file and uv lock file as cache key.
          key: ${{ hashFiles('environment.yml', 'package-lock.json', 'uv.lock') }}
          # Cache micromamba binary, micromamba environment.
          path: |
            ~/.local/bin
            ~/micromamba
      - if: steps.cache.outputs.cache-hit != 'true'
        run: |
          # Installs micromamba to ~/.local/bin, without init shell, without conda-forge
          # See this page for latest version: https://github.com/mamba-org/micromamba-releases/releases
          VERSION=2.1.1-0 INIT_YES=nein CONDA_FORGE_YES=nah "${SHELL}" <(curl -L micro.mamba.pm/install.sh)

          # Create Mamba environment
          micromamba create --file environment.yml --yes

          # Installs uv to ~/.local/bin
          # See this page for latest version: https://github.com/astral-sh/uv/releases
          curl --proto '=https' --tlsv1.2 -LsSf https://github.com/astral-sh/uv/releases/download/0.7.9/uv-installer.sh | sh

          # Install Python dependencies
          uv sync
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::961672313229:role/Account-GithubOidcRole20798CD3-LZP3AHTIPJU2
          aws-region: ap-southeast-2
      - run: |
          # Convert portfolio Beancount ledger to SQLite.
          uv run bean-sql portfolio-ledger/portfolio.beancount cdk/function/portfolio.db 2>/dev/null

          # Create target allocation table.
          uv run sqlite3 cdk/function/portfolio.db < portfolio-ledger/target_allocation.sql

          # Create additional tables.
          uv run sqlite3 cdk/function/portfolio.db < tables.sql

          # Precalculate table counts for immutable mode.
          cd cdk/function; datasette inspect portfolio.db --inspect-file=inspect_data.json; cd -

          # Do the same for demo data.
          uv run bean-sql cdk/demo-function/demo-portfolio.beancount cdk/demo-function/portfolio.db 2>/dev/null
          uv run sqlite3 cdk/demo-function/portfolio.db < cdk/demo-function/target_allocation.sql
          uv run sqlite3 cdk/demo-function/portfolio.db < tables.sql
          cd cdk/demo-function; uv run datasette inspect portfolio.db --inspect-file=inspect_data.json; cd -

          # Demo function dependencies are identical to the main function.
          cp cdk/function/pyproject.toml cdk/function/poetry.lock cdk/demo-function

          export MAMBA_ROOT_PREFIX=~/micromamba
          eval "$(./bin/micromamba shell hook -s posix)"
          micromamba activate portfolio

          # Install Node.js package dependencies.
          npm ci

          # Show CDK stack diff.
          npx cdk diff

          # Deploy CDK stack, writing CloudFormation outputs to file.
          npx cdk deploy --require-approval never Portfolio --outputs-file outputs.json

          # Invalidate CloudFront caches.
          aws cloudfront create-invalidation \
            --distribution-id $(jq --raw-output '.Portfolio.DistributionId' < outputs.json) \
            --paths "/*"
          aws cloudfront create-invalidation \
            --distribution-id $(jq --raw-output '.Portfolio.DemoDistributionId' < outputs.json) \
            --paths "/*"
