name: deploy
on:
  push:
    branches:
      - master
  repository_dispatch:
    types:
      - portfolio-ledger-push
jobs:
  deploy-portfolio:
    runs-on: ubuntu-latest
    # Allows JWT to be requested from GitHub's OIDC provider.
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v3
      - uses: actions/checkout@v3
        with:
          repository: eidorb/portfolio-ledger
          token: ${{ secrets.TOKEN }}
          path: portfolio-ledger
      - id: cache
        uses: actions/cache@v3
        with:
          # Use contents of Mamba environment file and Poetry lock file as cache key.
          key: ${{ hashFiles('environment.yml', 'poetry.lock') }}
          # Cache micromamba binary, .bashrc, Poetry installation and Mamba environment.
          path: |
            ./bin/micromamba
            ~/.bashrc
            ~/.local/bin/poetry
            ~/.local/share/pypoetry
            ~/micromamba/envs/portfolio
      - if: steps.cache.outputs.cache-hit != 'true'
        run: |
          # Install micromamba.
          wget -qO- https://micro.mamba.pm/api/micromamba/linux-64/latest | tar -xvj bin/micromamba
          ./bin/micromamba shell hook > ~/.bashrc

          # Install Poetry.
          curl -sSL https://install.python-poetry.org | python3 - --version 1.7.1

          # Create Mamba environment.
          source ~/.bashrc
          micromamba create --file environment.yml --yes
          micromamba activate portfolio

          # Install Python package dependencies.
          poetry install
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::961672313229:role/Account-GithubOidcRole20798CD3-LZP3AHTIPJU2
          aws-region: ap-southeast-2
      - run: |
          source ~/.bashrc
          micromamba activate portfolio

          # Convert portfolio Beancount ledger to SQLite.
          bean-sql portfolio-ledger/portfolio.beancount cdk/function/portfolio.db 2>/dev/null

          # Create target allocation table.
          sqlite3 cdk/function/portfolio.db < portfolio-ledger/target_allocation.sql

          # Create additional tables.
          sqlite3 cdk/function/portfolio.db < tables.sql

          # Precalculate table counts for immutable mode.
          datasette inspect cdk/function/portfolio.db --inspect-file=cdk/function/inspect_data.json

          # Do the same for demo data.
          bean-sql cdk/demo-function/demo-portfolio.beancount cdk/demo-function/portfolio.db 2>/dev/null
          sqlite3 cdk/demo-function/portfolio.db < portfolio-ledger/target_allocation.sql
          sqlite3 cdk/demo-function/portfolio.db < tables.sql
          datasette inspect cdk/demo-function/portfolio.db --inspect-file=cdk/demo-function/inspect_data.json

          # Install Node.js package dependencies.
          npm ci

          # Show CDK stack diff.
          npx cdk diff

          # Deploy CDK stack, writing CloudFormation outputs to file.
          npx cdk deploy --require-approval never Portfolio --outputs-file outputs.json

          # Invalidate CloudFront cache.
          aws cloudfront create-invalidation \
            --distribution-id $(jq --raw-output '.Portfolio.PortfolioDistributionId' < outputs.json) \
            --paths "/*"
